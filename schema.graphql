### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  content: String!
  createdAt: DateTime!
  deleteAt: DateTime
  id: Int!
  movieId: Int!
  updateAt: DateTime!
  username: String!
}

input CommentCreateInput {
  content: String!
  createdAt: DateTime
  deleteAt: DateTime
  movie: MovieCreateNestedOneWithoutCommentsInput!
  updateAt: DateTime
  username: String!
}

input CommentCreateNestedManyWithoutMovieInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutMovieInput!]
  create: [CommentCreateWithoutMovieInput!]
}

input CommentCreateOrConnectWithoutMovieInput {
  create: CommentCreateWithoutMovieInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutMovieInput {
  content: String!
  createdAt: DateTime
  deleteAt: DateTime
  updateAt: DateTime
  username: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  deleteAt: DateTimeNullableFilter
  id: IntFilter
  movie: MovieWhereInput
  movieId: IntFilter
  updateAt: DateTimeFilter
  username: StringFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Movie {
  ageRange: Int!
  cast: [String!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  director: String!
  duration: Int!
  id: Int!
  original_language: String!
  overview: String!
  poster_path: String!
  rating_average: Float!
  ratings(after: RatingWhereUniqueInput, before: RatingWhereUniqueInput, first: Int, last: Int): [Rating!]!
  release_date: DateTime!
  title: String!
}

input MovieCreateInput {
  ageRange: Int!
  cast: MovieCreatecastInput
  comments: CommentCreateNestedManyWithoutMovieInput
  director: String!
  duration: Int!
  gender: MovieCreategenderInput
  original_language: String!
  overview: String!
  poster_path: String!
  rating_average: Float!
  ratings: RatingCreateNestedManyWithoutMovieInput
  release_date: DateTime!
  title: String!
}

input MovieCreateNestedOneWithoutCommentsInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutCommentsInput
  create: MovieCreateWithoutCommentsInput
}

input MovieCreateNestedOneWithoutRatingsInput {
  connect: MovieWhereUniqueInput
  connectOrCreate: MovieCreateOrConnectWithoutRatingsInput
  create: MovieCreateWithoutRatingsInput
}

input MovieCreateOrConnectWithoutCommentsInput {
  create: MovieCreateWithoutCommentsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateOrConnectWithoutRatingsInput {
  create: MovieCreateWithoutRatingsInput!
  where: MovieWhereUniqueInput!
}

input MovieCreateWithoutCommentsInput {
  ageRange: Int!
  cast: MovieCreatecastInput
  director: String!
  duration: Int!
  gender: MovieCreategenderInput
  original_language: String!
  overview: String!
  poster_path: String!
  rating_average: Float!
  ratings: RatingCreateNestedManyWithoutMovieInput
  release_date: DateTime!
  title: String!
}

input MovieCreateWithoutRatingsInput {
  ageRange: Int!
  cast: MovieCreatecastInput
  comments: CommentCreateNestedManyWithoutMovieInput
  director: String!
  duration: Int!
  gender: MovieCreategenderInput
  original_language: String!
  overview: String!
  poster_path: String!
  rating_average: Float!
  release_date: DateTime!
  title: String!
}

input MovieCreatecastInput {
  set: [String!]
}

input MovieCreategenderInput {
  set: [String!]
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  ageRange: IntFilter
  cast: StringNullableListFilter
  comments: CommentListRelationFilter
  director: StringFilter
  duration: IntFilter
  gender: StringNullableListFilter
  id: IntFilter
  original_language: StringFilter
  overview: StringFilter
  poster_path: StringFilter
  rating_average: FloatFilter
  ratings: RatingListRelationFilter
  release_date: DateTimeFilter
  title: StringFilter
}

input MovieWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneMovie(data: MovieCreateInput!): Movie!
  createOneRating(data: RatingCreateInput!): Rating!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  movie(where: MovieWhereUniqueInput!): Movie
  movies(after: MovieWhereUniqueInput, before: MovieWhereUniqueInput, first: Int, last: Int, where: MovieWhereInput): [Movie!]!
}

enum QueryMode {
  default
  insensitive
}

type Rating {
  id: Int!
  movie: Movie!
  rate: Int!
  username: String!
}

input RatingCreateInput {
  movie: MovieCreateNestedOneWithoutRatingsInput!
  rate: Int!
  username: String!
}

input RatingCreateNestedManyWithoutMovieInput {
  connect: [RatingWhereUniqueInput!]
  connectOrCreate: [RatingCreateOrConnectWithoutMovieInput!]
  create: [RatingCreateWithoutMovieInput!]
}

input RatingCreateOrConnectWithoutMovieInput {
  create: RatingCreateWithoutMovieInput!
  where: RatingWhereUniqueInput!
}

input RatingCreateWithoutMovieInput {
  rate: Int!
  username: String!
}

input RatingListRelationFilter {
  every: RatingWhereInput
  none: RatingWhereInput
  some: RatingWhereInput
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  id: IntFilter
  movie: MovieWhereInput
  movieId: IntFilter
  rate: IntFilter
  username: StringFilter
}

input RatingWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}
